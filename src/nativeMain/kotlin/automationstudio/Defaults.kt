package automationstudio

val defaultEditorDefaults = listOf(
    DefaultEditor("c", "Text"),
    DefaultEditor("i", "Text"),
    DefaultEditor("h", "Text"),
    DefaultEditor("a", "Text"),
    DefaultEditor("s", "Text"),
    DefaultEditor("cpp", "Text"),
    DefaultEditor("c++", "Text"),
    DefaultEditor("cc", "Text"),
    DefaultEditor("cp", "Text"),
    DefaultEditor("cxx", "Text"),
    DefaultEditor("ii", "Text"),
    DefaultEditor("hpp", "Text"),
    DefaultEditor("hh", "Text"),
    DefaultEditor("dat", "Text"),
    DefaultEditor("txt", "Text"),
    DefaultEditor("xml", "Text"),
    DefaultEditor("fun", "Table"),
    DefaultEditor("var", "Table"),
    DefaultEditor("typ", "Table"),
    DefaultEditor("iom", "Table"),
    DefaultEditor("per", "Table"),
    DefaultEditor("vvm", "Table"),
    DefaultEditor("cnc", "Text"),
    DefaultEditor("ab", "Text"),
    DefaultEditor("st", "Text"),
    DefaultEditor("il", "Text"),
    DefaultEditor("ld", "Grafic"),
    DefaultEditor("rpt", "Table"),
    DefaultEditor("tt", "Table"),
    DefaultEditor("zpt", "Table"),
    DefaultEditor("ax", "Table"),
    DefaultEditor("vax", "Table"),
    DefaultEditor("cns", "Table"),
    DefaultEditor("ncc", "Table"),
    DefaultEditor("ett", "Table"),
    DefaultEditor("hwl", "Grafic"),
    DefaultEditor("sw", "Table"),
    DefaultEditor("hw", "Table"),
    DefaultEditor("ncm", "Table"),
    DefaultEditor("apt", "Table"),
    DefaultEditor("opcm", "Table"),
    DefaultEditor("opcc", "Table"),
    DefaultEditor("opct", "Table"),
    DefaultEditor("opcp", "Table"),
    DefaultEditor("opca", "Table"),
    DefaultEditor("textconfig", "Table"),
    DefaultEditor("language", "Table"),
    DefaultEditor("uad", "Table"),
    DefaultEditor("uanodeset", "Text"),
    DefaultEditor("uam", "Table"),
)

val itemDefaults = mapOf(
    ItemType.DataType to Item(ItemType.DataType, foreColor = Color(255, 0, 255)),
    ItemType.Number to Item(ItemType.Number),
    ItemType.InvalidKeyword to Item(ItemType.InvalidKeyword, foreColor = Color(255, 0, 0)),
    ItemType.Keyword to Item(ItemType.Keyword, foreColor = Color(0, 0, 255)),
    ItemType.Name to Item(ItemType.Name),
    ItemType.Remark to Item(ItemType.Remark, foreColor = Color(0, 128, 0)),
    ItemType.String to Item(ItemType.String, foreColor = Color(255, 0, 255)),
    ItemType.Text to Item(ItemType.Text),
    ItemType.TextSelection to Item(ItemType.TextSelection),
    ItemType.Operator to Item(ItemType.Operator),
    ItemType.Linenumber to Item(ItemType.Linenumber),
    ItemType.PrintPageBoundaries to Item(ItemType.PrintPageBoundaries, foreColor = Color(0, 128, 0)),
    ItemType.FormFeed to Item(ItemType.FormFeed, foreColor = Color(255, 0, 0)),
    ItemType.LineModificatorChange to Item(ItemType.LineModificatorChange, foreColor = Color(255, 255, 0)),
    ItemType.LineModificatorSave to Item(ItemType.LineModificatorSave, foreColor = Color(0, 128, 0)),
    ItemType.BracesHighlight to Item(ItemType.BracesHighlight, foreColor = Color(255, 255, 0)),
    ItemType.HypertextUrlHighlight to Item(ItemType.HypertextUrlHighlight, foreColor = Color(0, 0, 255)),
    ItemType.CodeSnippets to Item(ItemType.CodeSnippets, foreColor = Color(180, 228, 180)),
    ItemType.ColumnIndentation to Item(ItemType.ColumnIndentation, foreColor = Color(211, 211, 211)),
    ItemType.IncludeFiles to Item(ItemType.IncludeFiles, foreColor = Color(128, 0, 0)),
    ItemType.Equal to Item(ItemType.Equal, foreColor = Color(0, 0, 0)),
    ItemType.Similar to Item(ItemType.Similar, foreColor = Color(205, 92, 92)),
    ItemType.InLeftPaneOnly to Item(ItemType.InLeftPaneOnly, foreColor = Color(0, 0, 255)),
    ItemType.InRightPaneOnly to Item(ItemType.InRightPaneOnly, foreColor = Color(0, 128, 0)),
    ItemType.Different to Item(ItemType.Different, foreColor = Color(255, 0, 0)),
    ItemType.DifferentContent to Item(ItemType.DifferentContent, foreColor = Color(0, 139, 139)),
    ItemType.DifferentDetails to Item(ItemType.DifferentDetails, foreColor = Color(218, 112, 214)),
    ItemType.DifferentBlockItem to Item(ItemType.DifferentBlockItem, foreColor = Color(255, 0, 0)),
    ItemType.IncomparableBlockItem to Item(ItemType.IncomparableBlockItem, foreColor = Color(255, 165, 0)),
    ItemType.NoHwInfo to Item(ItemType.NoHwInfo, foreColor = Color(95, 158, 160)),
    ItemType.Errors to Item(ItemType.Errors, foreColor = Color(255, 0, 0)),
    ItemType.Warnings to Item(ItemType.Warnings, foreColor = Color(0, 128, 0)),
    ItemType.GroupBackgroundColor to Item(ItemType.GroupBackgroundColor),
    ItemType.LadderPowerFlow to Item(ItemType.LadderPowerFlow, foreColor = Color(0, 0, 255)),
    ItemType.Value to Item(ItemType.Value, foreColor = Color(0, 0, 0)),
    ItemType.ForceValue to Item(ItemType.ForceValue, foreColor = Color(255, 0, 0)),
    ItemType.ArchiveValue to Item(ItemType.ArchiveValue, foreColor = Color(0, 128, 0)),
    ItemType.RootNodeColor to Item(ItemType.RootNodeColor, foreColor = Color(0, 0, 255)),
    ItemType.InactiveValue to Item(ItemType.InactiveValue, foreColor = Color(169, 169, 169)),
    ItemType.SFCTransition to Item(ItemType.SFCTransition, foreColor = Color(0, 0, 255)),
)

val allCategories = listOf(
    Category(
        name = "Editor",
        font = Font(),
        items = Items(listOfNotNull(
            itemDefaults[ItemType.DataType],
            itemDefaults[ItemType.Number],
            itemDefaults[ItemType.InvalidKeyword],
            itemDefaults[ItemType.Keyword],
            itemDefaults[ItemType.Name],
            itemDefaults[ItemType.Remark],
            itemDefaults[ItemType.String],
            itemDefaults[ItemType.Text],
            itemDefaults[ItemType.TextSelection],
            itemDefaults[ItemType.Operator],
            itemDefaults[ItemType.Linenumber],
            itemDefaults[ItemType.PrintPageBoundaries],
            itemDefaults[ItemType.FormFeed],
        ))
    ),
    Category(
        name = "TextEditor",
        font = Font(name = "Courier New"),
        items = Items(listOfNotNull(
            itemDefaults[ItemType.DataType],
            itemDefaults[ItemType.Number],
            itemDefaults[ItemType.InvalidKeyword],
            itemDefaults[ItemType.Keyword],
            itemDefaults[ItemType.Name],
            itemDefaults[ItemType.Remark],
            itemDefaults[ItemType.String],
            itemDefaults[ItemType.Text],
            itemDefaults[ItemType.TextSelection],
            itemDefaults[ItemType.Operator],
            itemDefaults[ItemType.Linenumber],
            itemDefaults[ItemType.PrintPageBoundaries],
            itemDefaults[ItemType.LineModificatorChange],
            itemDefaults[ItemType.LineModificatorSave],
            itemDefaults[ItemType.BracesHighlight],
            itemDefaults[ItemType.HypertextUrlHighlight],
            itemDefaults[ItemType.CodeSnippets],
            itemDefaults[ItemType.ColumnIndentation],
            itemDefaults[ItemType.IncludeFiles],
        ))
    ),
    Category(
        name = "Graphical Editor",
        font = Font(),
        items = Items(listOfNotNull(
            itemDefaults[ItemType.DataType],
            itemDefaults[ItemType.Number],
            itemDefaults[ItemType.InvalidKeyword],
            itemDefaults[ItemType.Keyword],
            itemDefaults[ItemType.Name],
            itemDefaults[ItemType.Remark],
            itemDefaults[ItemType.String],
            itemDefaults[ItemType.Text],
            itemDefaults[ItemType.TextSelection],
            itemDefaults[ItemType.Operator],
            itemDefaults[ItemType.Linenumber],
            itemDefaults[ItemType.PrintPageBoundaries],
        ))
    ),
    Category(
        name = "CompareEditor",
        font = Font(),
        items = Items(listOfNotNull(
            itemDefaults[ItemType.Text],
            itemDefaults[ItemType.TextSelection],
            itemDefaults[ItemType.Equal],
            itemDefaults[ItemType.Similar],
            itemDefaults[ItemType.InLeftPaneOnly],
            itemDefaults[ItemType.InRightPaneOnly],
            itemDefaults[ItemType.Different],
            itemDefaults[ItemType.DifferentContent],
            itemDefaults[ItemType.DifferentDetails],
            itemDefaults[ItemType.DifferentBlockItem],
            itemDefaults[ItemType.IncomparableBlockItem],
            itemDefaults[ItemType.NoHwInfo],
        ))
    ),
    Category(
        name = "ProjectExplorer",
        font = Font(),
        items = Items(listOfNotNull(
            itemDefaults[ItemType.Text],
            itemDefaults[ItemType.TextSelection],
        ))
    ),
    Category(
        name = "Output",
        font = Font(),
        items = Items(listOfNotNull(
            itemDefaults[ItemType.Errors],
            itemDefaults[ItemType.Warnings],
            itemDefaults[ItemType.Text],
        ))
    ),
    Category(
        name = "Diagnosis",
        font = Font(),
        items = Items(listOfNotNull(
            itemDefaults[ItemType.Text],
            itemDefaults[ItemType.TextSelection],
            itemDefaults[ItemType.LadderPowerFlow],
            itemDefaults[ItemType.Value],
            itemDefaults[ItemType.ForceValue],
            itemDefaults[ItemType.ArchiveValue],
            itemDefaults[ItemType.RootNodeColor],
            itemDefaults[ItemType.InactiveValue],
            itemDefaults[ItemType.SFCTransition],
            itemDefaults[ItemType.Similar],
            itemDefaults[ItemType.InLeftPaneOnly],
            itemDefaults[ItemType.InRightPaneOnly],
            itemDefaults[ItemType.Different],
            itemDefaults[ItemType.DifferentContent],
            itemDefaults[ItemType.DifferentDetails],
            itemDefaults[ItemType.NoHwInfo],
        ))
    ),
    Category(
        name = "PropertyWindow",
        font = Font(),
        items = Items(listOfNotNull(
            itemDefaults[ItemType.Text],
            itemDefaults[ItemType.TextSelection],
            itemDefaults[ItemType.GroupBackgroundColor],
        ))
    )
)
